{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["const _LoggingLevels = ['trace', 'debug', 'info', 'warn', 'error'] as const;\nexport type LoggingLevels = typeof _LoggingLevels[number];\n\ntype Logger = Record<LoggingLevels, (message?: string, ...optionalParams: any[]) => void>\n\ntype RGB = `rgb(${number}, ${number}, ${number})`;\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`;\ntype HEX = `#${string}`;\n\ntype Color = RGB | RGBA | HEX;\n\ntype LoggerStyle = {\n    colors: Partial<Record<LoggingLevels, Color>>,\n    weights: Partial<Record<LoggingLevels, number>>,\n    level: {\n        weight?: number,\n        color?: Color,\n        format?: (level: string) => string\n    }\n    module: {\n        weight?: number,\n        color?: Color,\n        format?: (level: string) => string\n    }\n};\ninterface Options {\n    level: LoggingLevels,\n    module?: string,\n    styles?: Partial<LoggerStyle>\n}\nconst _configs: LoggerStyle = {\n    colors: {\n        trace: '#212529',\n        debug: '#0d6efd',\n        info: '#198754',\n        warn: '#ffc107',\n        error: '#dc3545',\n    },\n    weights: {\n        trace: 350,\n        debug: 350,\n        info: 400,\n        warn: 400,\n        error: 400,\n    },\n    level: {\n        weight: 400,\n        format: (level: string) => `[${level.toUpperCase()}]`.padEnd(7, ' '),\n    },\n    module: {\n        color: '#aaa',\n        weight: 400,\n        format: (module: string) => `[${module}]`.padStart(10, ' '),\n    }\n}\nconst noop = function () {}\n\nexport function getLogger(opts: Options = {level: \"info\"}) {\n    const logger: Logger = {} as Logger;\n    const userLevel = _LoggingLevels.findIndex(_level => _level === (opts.level || \"info\"));\n    const shouldLog = (level: number) => {\n        return level >= userLevel;\n    }\n\n    const configs: LoggerStyle = {\n        colors: {..._configs.colors, ...opts.styles?.colors || {}},\n        weights: {..._configs.weights, ...opts.styles?.weights || {}},\n        level: {..._configs.level, ...opts.styles?.level || {}},\n        module: {..._configs.module, ...opts.styles?.module || {}},\n    }\n\n    const getStyle = (level: LoggingLevels, type?: 'level' | 'module') => {\n        if (!type) {\n            return `color: ${configs.colors[level]}; font-weight: ${configs.weights[level]};`\n        }\n        const color = configs[type].color || configs.colors[level];\n        const weight = configs[type].weight || configs.weights[level];\n        return `color: ${color}; font-weight: ${weight};`\n    }\n\n    const _module = !opts.module ? \"\": configs.module.format!(opts.module);\n    _LoggingLevels.forEach((method, level) => {\n        const log = (message?: string, ...optionalParams: any[]) => {\n            const _level = configs.level.format!(method);\n            const _date = new Date().toISOString();\n            const _message = `%c${_date} %c${_level} %c${_module} %c${message}`;\n            let style = getStyle(method);\n            console[method](_message,\n                getStyle(method, 'level'),\n                style,\n                getStyle(method, 'module'),\n                style,\n                ...optionalParams);\n        }\n        logger[method] = shouldLog(level) ? log : noop\n    })\n    return logger\n}\n\nexport default getLogger({\n    level: \"info\"\n});\n"],
  "mappings": "4WAAA,IAAMA,EAAiB,CAAC,QAAS,QAAS,OAAQ,OAAQ,OAAO,EA8B3DC,EAAwB,CAC1B,OAAQ,CACJ,MAAO,UACP,MAAO,UACP,KAAM,UACN,KAAM,UACN,MAAO,SACX,EACA,QAAS,CACL,MAAO,IACP,MAAO,IACP,KAAM,IACN,KAAM,IACN,MAAO,GACX,EACA,MAAO,CACH,OAAQ,IACR,OAASC,GAAkB,IAAIA,EAAM,YAAY,KAAK,OAAO,EAAG,GAAG,CACvE,EACA,OAAQ,CACJ,MAAO,OACP,OAAQ,IACR,OAASC,GAAmB,IAAIA,KAAU,SAAS,GAAI,GAAG,CAC9D,CACJ,EACMC,EAAO,UAAY,CAAC,EAEnB,SAASC,EAAUC,EAAgB,CAAC,MAAO,MAAM,EAAG,CAzD3D,IAAAC,EAAAC,EAAAC,EAAAC,EA0DI,IAAMC,EAAiB,CAAC,EAClBC,EAAYZ,EAAe,UAAUa,GAAUA,KAAYP,EAAK,OAAS,OAAO,EAChFQ,EAAaZ,GACRA,GAASU,EAGdG,EAAuB,CACzB,OAAQC,IAAA,GAAIf,EAAS,UAAWM,EAAAD,EAAK,SAAL,YAAAC,EAAa,SAAU,CAAC,GACxD,QAASS,IAAA,GAAIf,EAAS,WAAYO,EAAAF,EAAK,SAAL,YAAAE,EAAa,UAAW,CAAC,GAC3D,MAAOQ,IAAA,GAAIf,EAAS,SAAUQ,EAAAH,EAAK,SAAL,YAAAG,EAAa,QAAS,CAAC,GACrD,OAAQO,IAAA,GAAIf,EAAS,UAAWS,EAAAJ,EAAK,SAAL,YAAAI,EAAa,SAAU,CAAC,EAC5D,EAEMO,EAAW,CAACf,EAAsBgB,IAA8B,CAClE,GAAI,CAACA,EACD,MAAO,UAAUH,EAAQ,OAAOb,oBAAwBa,EAAQ,QAAQb,MAE5E,IAAMiB,EAAQJ,EAAQG,GAAM,OAASH,EAAQ,OAAOb,GAC9CkB,EAASL,EAAQG,GAAM,QAAUH,EAAQ,QAAQb,GACvD,MAAO,UAAUiB,mBAAuBC,IAC5C,EAEMC,EAAWf,EAAK,OAAaS,EAAQ,OAAO,OAAQT,EAAK,MAAM,EAAtC,GAC/B,OAAAN,EAAe,QAAQ,CAACsB,EAAQpB,IAAU,CACtC,IAAMqB,EAAM,CAACC,KAAqBC,IAA0B,CACxD,IAAMZ,EAASE,EAAQ,MAAM,OAAQO,CAAM,EAErCI,EAAW,KADH,IAAI,KAAK,EAAE,YAAY,OACJb,OAAYQ,OAAaG,IACtDG,EAAQV,EAASK,CAAM,EAC3B,QAAQA,GAAQI,EACZT,EAASK,EAAQ,OAAO,EACxBK,EACAV,EAASK,EAAQ,QAAQ,EACzBK,EACA,GAAGF,CAAc,CACzB,EACAd,EAAOW,GAAUR,EAAUZ,CAAK,EAAIqB,EAAMnB,CAC9C,CAAC,EACMO,CACX,CAEA,IAAOiB,EAAQvB,EAAU,CACrB,MAAO,MACX,CAAC",
  "names": ["_LoggingLevels", "_configs", "level", "module", "noop", "getLogger", "opts", "_a", "_b", "_c", "_d", "logger", "userLevel", "_level", "shouldLog", "configs", "__spreadValues", "getStyle", "type", "color", "weight", "_module", "method", "log", "message", "optionalParams", "_message", "style", "src_default"]
}
